需求分析：
采用面向对象的分析方法，用UML来进行建模，识别出系统中的实体，画出类图，识别出系统的外部使用者，用用例图来对系统的功能进行需求分析，
每个用例分别考虑它的四种规约：前置条件、后置条件、基本流、替代流。
画出活动图来表达出模块的主要流程，基于泳道的活动图更加清晰，它明确地表示了哪些活动是由哪些对象进行的。带泳道的活动图能明确地表示了哪些活动是由哪些对象进行的。

开发模式：
采用快速应用开发（RAD）模式，在前期进行了一定的需求分析之后，需求人员与网页美工人员配合，快速开发出一个页面原型系统，该原型系统只有页面及页面到页面之间的跳转，
不需要出开发后台的具体业务功能，开发该原型系统的目的是为了确定用户的需求，并进一步征求用户在新功能、用户友好性、增加数据项等方面的意见。在完成原型系统后，开发小组
进行系统开发，重用原先系统的架构及大量构件，大大提高了开发效率、缩短了开发周期、提高了系统的性能、可用性及可维护性，将原型转化为最终运行系统。
采用迭代、增量的开发模式：

数据库设计：
一对一：一般可以一对一关系直接放在同一张表中，如果字段太多，可以将表拆分为一张主表，其余表为从表。
一对多：设计为两张表，然后在多的那个表里添加外键。
多对多：设计为三张表，两个实体两张表，再加一个关联表。

系统测试：
单元测试、集成测试、确认测试、系统测试。
负载与并发测试

权限管理：
基于角色的访问控制（Role-Based Access Control），是一种动态权限管理方案。传统的权限管理方案是基于角色的静态权限管理方案。

基于构件开发：
以前项目中积累下来的一些通用构件大大提高了软件开发的效率，大大缩短了软件开发的周期。

软件维护：
软件维护的核心在于预防，即在于提高软件的可维护性上，为了提高软件的可维护性而对系统不断进行的重构是值得的。
使用SSH等框架、使用泛型Dao等技术、及基于构架开发等都可以提高软件的可维护性。

团队开发：
团队开发要使用必要的团队开发工具，如cvs,svn等。

https与http的跨域访问：
在tomcat下在https下登陆再跳转到http会造成用户会话信息的丢失。
还要在考虑在https下在客户端进行javascript RSA加密的必要性。

